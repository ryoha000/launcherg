// This file is @generated by prost-build.
/// Native Messaging Hostへのリクエストメッセージ
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NativeMessage {
    #[prost(message, optional, tag = "1")]
    pub timestamp: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
    /// oneofを使用してメッセージタイプとペイロードの整合性を保証
    #[prost(oneof = "native_message::Message", tags = "10, 11, 12, 13, 14")]
    pub message: ::core::option::Option<native_message::Message>,
}
/// Nested message and enum types in `NativeMessage`.
pub mod native_message {
    /// oneofを使用してメッセージタイプとペイロードの整合性を保証
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Message {
        #[prost(message, tag = "10")]
        SyncDmmGames(super::super::sync::DmmSyncGamesRequest),
        #[prost(message, tag = "11")]
        SyncDlsiteGames(super::super::sync::DlsiteSyncGamesRequest),
        #[prost(message, tag = "12")]
        GetStatus(super::GetStatusRequest),
        #[prost(message, tag = "13")]
        SetConfig(super::super::status::ExtensionConfig),
        #[prost(message, tag = "14")]
        HealthCheck(super::HealthCheckRequest),
    }
}
/// ステータス取得リクエスト（空のメッセージ）
///
/// 空のメッセージ - リクエストパラメータは不要
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetStatusRequest {}
/// ヘルスチェックリクエスト（空のメッセージ）
///
/// 空のメッセージ - ping的な用途
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct HealthCheckRequest {}
/// Native Messaging Hostからのレスポンスメッセージ
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct NativeResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
    /// oneofを使用してレスポンスタイプとデータの整合性を保証
    #[prost(oneof = "native_response::Response", tags = "10, 11, 12, 13")]
    pub response: ::core::option::Option<native_response::Response>,
}
/// Nested message and enum types in `NativeResponse`.
pub mod native_response {
    /// oneofを使用してレスポンスタイプとデータの整合性を保証
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Response {
        #[prost(message, tag = "10")]
        SyncGamesResult(super::super::sync::SyncBatchResult),
        #[prost(message, tag = "11")]
        StatusResult(super::super::status::SyncStatus),
        #[prost(message, tag = "12")]
        ConfigResult(super::ConfigUpdateResult),
        #[prost(message, tag = "13")]
        HealthCheckResult(super::HealthCheckResult),
    }
}
/// 設定更新結果
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ConfigUpdateResult {
    #[prost(string, tag = "1")]
    pub message: ::prost::alloc::string::String,
}
/// ヘルスチェック結果
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct HealthCheckResult {
    #[prost(string, tag = "1")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
}
